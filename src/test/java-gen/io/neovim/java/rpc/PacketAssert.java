package io.neovim.java.rpc;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link Packet} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PacketAssert extends AbstractAssert<PacketAssert, Packet> {

  /**
   * Creates a new <code>{@link PacketAssert}</code> to make assertions on actual Packet.
   * @param actual the Packet we want to make assertions on.
   */
  public PacketAssert(Packet actual) {
    super(actual, PacketAssert.class);
  }

  /**
   * An entry point for PacketAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myPacket)</code> and get specific assertion with code completion.
   * @param actual the Packet we want to make assertions on.
   * @return a new <code>{@link PacketAssert}</code>
   */
  public static PacketAssert assertThat(Packet actual) {
    return new PacketAssert(actual);
  }

  /**
   * Verifies that the actual Packet's type is equal to the given one.
   * @param type the given type to compare the actual Packet's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Packet's type is not equal to the given one.
   */
  public PacketAssert hasType(Packet.Type type) {
    // check that actual Packet we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Packet.Type actualType = actual.type;
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
