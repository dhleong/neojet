package io.neovim.java.rpc;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ResponsePacket} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ResponsePacketAssert extends AbstractAssert<ResponsePacketAssert, ResponsePacket> {

  /**
   * Creates a new <code>{@link ResponsePacketAssert}</code> to make assertions on actual ResponsePacket.
   * @param actual the ResponsePacket we want to make assertions on.
   */
  public ResponsePacketAssert(ResponsePacket actual) {
    super(actual, ResponsePacketAssert.class);
  }

  /**
   * An entry point for ResponsePacketAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myResponsePacket)</code> and get specific assertion with code completion.
   * @param actual the ResponsePacket we want to make assertions on.
   * @return a new <code>{@link ResponsePacketAssert}</code>
   */
  public static ResponsePacketAssert assertThat(ResponsePacket actual) {
    return new ResponsePacketAssert(actual);
  }

  /**
   * Verifies that the actual ResponsePacket's error is equal to the given one.
   * @param error the given error to compare the actual ResponsePacket's error to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResponsePacket's error is not equal to the given one.
   */
  public ResponsePacketAssert hasError(Object error) {
    // check that actual ResponsePacket we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting error of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualError = actual.error;
    if (!Objects.areEqual(actualError, error)) {
      failWithMessage(assertjErrorMessage, actual, error, actualError);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResponsePacket's requestId is equal to the given one.
   * @param requestId the given requestId to compare the actual ResponsePacket's requestId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResponsePacket's requestId is not equal to the given one.
   */
  public ResponsePacketAssert hasRequestId(int requestId) {
    // check that actual ResponsePacket we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting requestId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualRequestId = actual.requestId;
    if (actualRequestId != requestId) {
      failWithMessage(assertjErrorMessage, actual, requestId, actualRequestId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResponsePacket's result is equal to the given one.
   * @param result the given result to compare the actual ResponsePacket's result to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResponsePacket's result is not equal to the given one.
   */
  public ResponsePacketAssert hasResult(Object result) {
    // check that actual ResponsePacket we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting result of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Object actualResult = actual.result;
    if (!Objects.areEqual(actualResult, result)) {
      failWithMessage(assertjErrorMessage, actual, result, actualResult);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ResponsePacket's type is equal to the given one.
   * @param type the given type to compare the actual ResponsePacket's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ResponsePacket's type is not equal to the given one.
   */
  public ResponsePacketAssert hasType(Packet.Type type) {
    // check that actual ResponsePacket we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Packet.Type actualType = actual.type;
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
