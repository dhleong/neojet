package io.neovim.java.rpc;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link NotificationPacket} specific assertions - Generated by CustomAssertionGenerator.
 */
public class NotificationPacketAssert extends AbstractAssert<NotificationPacketAssert, NotificationPacket> {

  /**
   * Creates a new <code>{@link NotificationPacketAssert}</code> to make assertions on actual NotificationPacket.
   * @param actual the NotificationPacket we want to make assertions on.
   */
  public NotificationPacketAssert(NotificationPacket actual) {
    super(actual, NotificationPacketAssert.class);
  }

  /**
   * An entry point for NotificationPacketAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myNotificationPacket)</code> and get specific assertion with code completion.
   * @param actual the NotificationPacket we want to make assertions on.
   * @return a new <code>{@link NotificationPacketAssert}</code>
   */
  public static NotificationPacketAssert assertThat(NotificationPacket actual) {
    return new NotificationPacketAssert(actual);
  }

  /**
   * Verifies that the actual NotificationPacket's args contains the given Object elements.
   * @param args the given elements that should be contained in actual NotificationPacket's args.
   * @return this assertion object.
   * @throws AssertionError if the actual NotificationPacket's args does not contain all given Object elements.
   */
  public NotificationPacketAssert hasArgs(Object... args) {
    // check that actual NotificationPacket we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (args == null) failWithMessage("Expecting args parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.args, args);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual NotificationPacket's args contains <b>only<b> the given Object elements and nothing else in whatever order.
   * @param args the given elements that should be contained in actual NotificationPacket's args.
   * @return this assertion object.
   * @throws AssertionError if the actual NotificationPacket's args does not contain all given Object elements.
   */
  public NotificationPacketAssert hasOnlyArgs(Object... args) {
    // check that actual NotificationPacket we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (args == null) failWithMessage("Expecting args parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.args, args);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual NotificationPacket's args does not contain the given Object elements.
   *
   * @param args the given elements that should not be in actual NotificationPacket's args.
   * @return this assertion object.
   * @throws AssertionError if the actual NotificationPacket's args contains any given Object elements.
   */
  public NotificationPacketAssert doesNotHaveArgs(Object... args) {
    // check that actual NotificationPacket we want to make assertions on is not null.
    isNotNull();

    // check that given Object varargs is not null.
    if (args == null) failWithMessage("Expecting args parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.args, args);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual NotificationPacket has no args.
   * @return this assertion object.
   * @throws AssertionError if the actual NotificationPacket's args is not empty.
   */
  public NotificationPacketAssert hasNoArgs() {
    // check that actual NotificationPacket we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have args but had :\n  <%s>";
    
    // check
    if (actual.args.iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.args);
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual NotificationPacket's event is equal to the given one.
   * @param event the given event to compare the actual NotificationPacket's event to.
   * @return this assertion object.
   * @throws AssertionError - if the actual NotificationPacket's event is not equal to the given one.
   */
  public NotificationPacketAssert hasEvent(String event) {
    // check that actual NotificationPacket we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting event of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualEvent = actual.event;
    if (!Objects.areEqual(actualEvent, event)) {
      failWithMessage(assertjErrorMessage, actual, event, actualEvent);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual NotificationPacket's type is equal to the given one.
   * @param type the given type to compare the actual NotificationPacket's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual NotificationPacket's type is not equal to the given one.
   */
  public NotificationPacketAssert hasType(Packet.Type type) {
    // check that actual NotificationPacket we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Packet.Type actualType = actual.type;
    if (!Objects.areEqual(actualType, type)) {
      failWithMessage(assertjErrorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
