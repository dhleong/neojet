package io.neovim.java;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link IntPair} specific assertions - Generated by CustomAssertionGenerator.
 */
public class IntPairAssert extends AbstractAssert<IntPairAssert, IntPair> {

  /**
   * Creates a new <code>{@link IntPairAssert}</code> to make assertions on actual IntPair.
   * @param actual the IntPair we want to make assertions on.
   */
  public IntPairAssert(IntPair actual) {
    super(actual, IntPairAssert.class);
  }

  /**
   * An entry point for IntPairAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myIntPair)</code> and get specific assertion with code completion.
   * @param actual the IntPair we want to make assertions on.
   * @return a new <code>{@link IntPairAssert}</code>
   */
  public static IntPairAssert assertThat(IntPair actual) {
    return new IntPairAssert(actual);
  }

  /**
   * Verifies that the actual IntPair's first is equal to the given one.
   * @param first the given first to compare the actual IntPair's first to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IntPair's first is not equal to the given one.
   */
  public IntPairAssert hasFirst(int first) {
    // check that actual IntPair we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting first of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualFirst = actual.first;
    if (actualFirst != first) {
      failWithMessage(assertjErrorMessage, actual, first, actualFirst);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual IntPair's second is equal to the given one.
   * @param second the given second to compare the actual IntPair's second to.
   * @return this assertion object.
   * @throws AssertionError - if the actual IntPair's second is not equal to the given one.
   */
  public IntPairAssert hasSecond(int second) {
    // check that actual IntPair we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting second of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualSecond = actual.second;
    if (actualSecond != second) {
      failWithMessage(assertjErrorMessage, actual, second, actualSecond);
    }

    // return the current assertion for method chaining
    return this;
  }

}
